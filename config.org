#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle config.el :comments link
* Introduction
This org file contains the literate Doom Emacs configuration. All code
blocks tangle to config.el for use by Doom.
* Setup
** Basic Setup
#+begin_src emacs-lisp :tangle config.el
(setq user-full-name    (or (getenv "USER_FULL_NAME") "")
      user-mail-address (or (getenv "USER_MAIL_ADDRESS") "")
      auth-sources '("~/.authinfo.gpg")
      major-mode 'org-mode
)
#+end_src

* Secure Configuration Practices
It is important to keep personal data such as real names, email
addresses, API keys or tokens **out of version control**.  This
configuration follows these rules:
1.  Sensitive values live in environment variables or in a local file
     ~config.local.el~ which is *not* tracked by Git.
2.  Credentials are stored in =~/.authinfo.gpg= (or the file specified
    by the =$AUTHINFO_FILE= environment variable) so they remain
    encrypted at rest.
3.  Before committing, ensure no personal information leaks into
    tracked files.

** Local Overrides
# This file (ignored by Git) may redefine personal variables such as
# `user-full-name', `user-mail-address', or mail settings.
#+begin_src emacs-lisp :tangle config.el
(let ((local (expand-file-name "config.local.el" doom-user-dir)))
  (when (file-exists-p local)
    (load local)))
#+end_src

** Dashboard
The Doom dashboard is customized with a splash image and no shortmenu.
#+begin_src emacs-lisp :tangle config.el
;; Remove the shortmenu widget and tweak visuals of the dashboard.
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)

;; Ensure cursor is hidden in dashboard and set a custom splash image.
(setq-hook! '+doom-dashboard-mode-hook
  evil-normal-state-cursor (list nil))
(setq fancy-splash-image (concat doom-user-dir "butterfly.svg"))

;; Centre the initial frame.
(setq initial-frame-alist
      '((top . 1) (left . 120) (width . 143) (height . 55)))
#+end_src

** Visual
Theme and font settings for a consistent look across systems.
#+begin_src emacs-lisp :tangle config.el
(setq doom-theme 'doom-dracula
doom-font (font-spec :family "CaskaydiaMono Nerd Font" :size 32 :weight 'light)
doom-variable-pitch-font (font-spec :family "CaskaydiaMono Nerd Font" :size 32)
)
(if (eq system-type 'darwin)
 (setq
   doom-font (font-spec :family "Cascadia Mono NF" :size 16 :weight 'light)
   doom-variable-pitch-font (font-spec :family "Cascadia Mono NF" :size 16)))
(setq-default line-spacing 0.24)
#+end_src
** Core Behaviors
General editor behaviour tweaks.
#+begin_src emacs-lisp :tangle config.el
(setq scroll-margin 2
      auto-save-default t
      display-line-numbers-type nil
      auth-source-cache-expiry nil
      starttls-use-gnutls t
      mac-right-option-modifier 'meta
      global-subword-mode t ; Iterate through CamelCase words
      delete-by-moving-to-trash t                      ; Delete files to trash
      window-combination-resize t                      ; take new window space from all other windows (not just current)
      x-stretch-cursor t
      avy-all-windows t
      good-scroll-mode t
      evil-escape-key-sequence "fd"
      gnutls-verify-error nil
      truncate-string-ellipsis "…"
      browse-url-browser-function 'xwidget-webkit-browse-url)
#+end_src

** Mu4e
# Removed – email settings now live in =config.local.el= to keep
# personal information out of version control.
** Org
#+begin_src emacs-lisp :tangle config.el
 (after! org

   (map! :map org-mode-map
         :n "M-j" #'org-metadown
         :n "M-k" #'org-metaup)
   (setq org-directory (or (getenv "ORG_NOTES_DIR") "~/Documents/notes/")
         org-agenda-files (directory-files-recursively org-directory "\\.org$")
         org-log-done 'time
         org-agenda-start-with-log-mode t
         org-log-into-drawer t
         org-tags-column -80
         org-ellipsis "⚡⚡⚡"
         org-todo-keywords '((sequence "TODO(t)" "INPROGRESS(i)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)"))
         org-todo-keyword-faces
         '(
            ("TODO" :foreground "#7c7c75" :weight normal :underline t)
            ("WAITING" :foreground "#9f7efe" :weight normal :underline t)
            ("INPROGRESS" :foreground "#0098dd" :weight normal :underline t)
            ("DONE" :foreground "#50a14f" :weight normal :underline t)
            ("CANCELLED" :foreground "#ff6480" :weight normal :underline t)
            )
       ))

#+end_src

#+RESULTS:
| TODO       | :foreground | #7c7c75 | :weight | normal | :underline | t |
| WAITING    | :foreground | #9f7efe | :weight | normal | :underline | t |
| INPROGRESS | :foreground | #0098dd | :weight | normal | :underline | t |
| DONE       | :foreground | #50a14f | :weight | normal | :underline | t |
| CANCELLED  | :foreground | #ff6480 | :weight | normal | :underline | t |

* Navigation
Tools to move around projects.
** Treemacs
File tree viewer.
#+begin_src emacs-lisp :tangle config.el
(setq treemacs-follow-mode t)
#+end_src
** Dirvish
Modern dired replacement.
#+begin_src emacs-lisp :tangle config.el
(use-package! dirvish)
#+end_src

* AI/LLM Integration
** gptel
ChatGPT/LLM client for Emacs configured to use local OpenAI-compatible API.
#+begin_src emacs-lisp :tangle config.el
(after! gptel
  (setq gptel-model 'openai/gpt-oss-20b
        gptel-backend (gptel-make-openai "local-api"
                        :host "localhost:1234"
                        :protocol "http"
                        :stream t
                        :key "dummy-key"
                        :models '(openai/gpt-oss-20b)))

  ;; Code assistant system prompts/directives
  (setq gptel-directives
        '((default . "You are a helpful AI assistant.")
          (code-review . "You are a senior software engineer conducting code reviews. Focus on:
- Code quality, readability, and maintainability
- Potential bugs and edge cases
- Performance considerations
- Best practices and design patterns
- Security vulnerabilities
Provide specific, actionable feedback with examples.")
          (explain-code . "You are a code explanation expert. Break down complex code into understandable parts:
- Explain what the code does step by step
- Identify key algorithms and data structures
- Point out important design decisions
- Mention any potential gotchas or edge cases
Use clear, simple language suitable for learning.")
          (refactor . "You are a code refactoring specialist. Improve code while maintaining functionality:
- Improve readability and structure
- Eliminate code smells
- Apply appropriate design patterns
- Optimize performance where beneficial
- Maintain backward compatibility
Always explain your refactoring decisions.")
          (debug . "You are a debugging expert. Help identify and fix bugs:
- Analyze error messages and stack traces
- Identify potential root causes
- Suggest debugging strategies
- Provide working fixes with explanations
- Recommend preventive measures")
          (optimize . "You are a performance optimization expert:
- Identify performance bottlenecks
- Suggest algorithmic improvements
- Recommend efficient data structures
- Consider memory usage and time complexity
- Provide benchmarking strategies")
          (test . "You are a testing expert. Help with test creation and strategy:
- Write comprehensive unit tests
- Suggest integration test scenarios
- Identify edge cases to test
- Recommend testing frameworks and tools
- Explain test-driven development practices")))

  ;; Set default to code review for programming modes
  (add-hook 'prog-mode-hook
            (lambda ()
              (setq-local gptel-directives gptel-directives)
              (setq-local gptel-default-mode 'text-mode))))
#+end_src

** Code Assistant Functions
Helper functions for code assistant workflows.
#+begin_src emacs-lisp :tangle config.el
(defun my/gptel-code-review ()
  "Review selected code with gptel using code-review directive."
  (interactive)
  (let ((gptel-directives (alist-get 'code-review gptel-directives)))
    (call-interactively #'gptel-send)))

(defun my/gptel-explain-code ()
  "Explain selected code with gptel."
  (interactive)
  (let ((gptel-directives (alist-get 'explain-code gptel-directives)))
    (call-interactively #'gptel-send)))

(defun my/gptel-refactor-code ()
  "Refactor selected code with gptel."
  (interactive)
  (let ((gptel-directives (alist-get 'refactor gptel-directives)))
    (call-interactively #'gptel-rewrite)))

(defun my/gptel-debug-help ()
  "Get debugging help for selected code/error."
  (interactive)
  (let ((gptel-directives (alist-get 'debug gptel-directives)))
    (call-interactively #'gptel-send)))

(defun my/gptel-optimize-code ()
  "Get optimization suggestions for selected code."
  (interactive)
  (let ((gptel-directives (alist-get 'optimize gptel-directives)))
    (call-interactively #'gptel-send)))

(defun my/gptel-write-tests ()
  "Generate tests for selected code."
  (interactive)
  (let ((gptel-directives (alist-get 'test gptel-directives)))
    (call-interactively #'gptel-send)))

(defun my/gptel-add-project-context ()
  "Add key project files to gptel context."
  (interactive)
  (let* ((project-root (projectile-project-root))
         (key-files '("README.md" "package.json" "Cargo.toml" "pyproject.toml"
                     "requirements.txt" "go.mod" "pom.xml" "build.gradle")))
    (when project-root
      (dolist (file key-files)
        (let ((full-path (expand-file-name file project-root)))
          (when (file-exists-p full-path)
            (gptel-add-file full-path)
            (message "Added %s to context" file)))))))

(defun my/gptel-coding-session ()
  "Start a dedicated coding session with project context."
  (interactive)
  (my/gptel-add-project-context)
  (let ((gptel-directives (alist-get 'code-review gptel-directives)))
    (gptel "Code Assistant")))
#+end_src

** Keybindings
Custom leader mappings and code assistant shortcuts.
#+begin_src emacs-lisp :tangle config.el
(map! :leader
      :desc "other window"
      "w o" #'other-window

      (:prefix ("l" . "LLM Assistant")
       :desc "Chat"              "c" #'gptel
       :desc "Send"              "s" #'gptel-send
       :desc "Menu"              "m" #'gptel-menu
       :desc "Rewrite"           "r" #'gptel-rewrite
       :desc "Add context"       "a" #'gptel-add
       :desc "Add file"          "f" #'gptel-add-file

       (:prefix ("o" . "Code Assistant")
        :desc "Code review"      "r" #'my/gptel-code-review
        :desc "Explain code"     "e" #'my/gptel-explain-code
        :desc "Refactor"         "f" #'my/gptel-refactor-code
        :desc "Debug help"       "d" #'my/gptel-debug-help
        :desc "Optimize"         "o" #'my/gptel-optimize-code
        :desc "Write tests"      "t" #'my/gptel-write-tests
        :desc "Coding session"   "s" #'my/gptel-coding-session
        :desc "Add project ctx"  "p" #'my/gptel-add-project-context)))

;; Set up local leader for all programming modes
(setq doom-localleader-key ",")
(setq doom-localleader-alt-key "M-,")

;; Quick access in programming modes - applies to ALL programming languages
(map! :after prog-mode
      :map prog-mode-map
      :localleader
      :desc "Code review"       "r" #'my/gptel-code-review
      :desc "Explain"           "e" #'my/gptel-explain-code
      :desc "Refactor"          "f" #'my/gptel-refactor-code
      :desc "Debug"             "d" #'my/gptel-debug-help
      :desc "Optimize"          "o" #'my/gptel-optimize-code
      :desc "Tests"             "t" #'my/gptel-write-tests)

;; Hook to ensure local leader is available in all programming modes
(add-hook 'prog-mode-hook
          (lambda ()
            (map! :map (current-local-map)
                  :localleader
                  :desc "Code review"       "r" #'my/gptel-code-review
                  :desc "Explain"           "e" #'my/gptel-explain-code
                  :desc "Refactor"          "f" #'my/gptel-refactor-code
                  :desc "Debug"             "d" #'my/gptel-debug-help
                  :desc "Optimize"          "o" #'my/gptel-optimize-code
                  :desc "Tests"             "t" #'my/gptel-write-tests)))

#+end_src
